syntax="proto3";
option java_package = "com.bootapp.grpc.core";
import "google/api/annotations.proto";
import "core_common.proto";

package proto;
service SrvCoreUserService {
    // =============================================== users
    rpc Register(RegisterReq) returns (LoginResp) {
        option (google.api.http) = {
            post: "/rpc/auth/register"
            body: "*"
        };
    }
    rpc Login(LoginReq) returns (LoginResp) {
        option (google.api.http) = {
            post: "/rpc/auth/login"
            body: "*"
        };
    }
    rpc Refresh(RefreshReq) returns (RefreshResp) {
        option (google.api.http) = {
            post: "/rpc/auth/refresh"
            body: "*"
        };
    }
    rpc Logout(Empty) returns (Empty) {
        option (google.api.http) = {
            get: "/rpc/auth/logout"
        };
    }
    rpc ResetPassword(ResetPasswordReq) returns (Empty) {
        option (google.api.http) = {
            post: "/rpc/auth/reset-password"
            body: "*"
        };
    }
    rpc Activate(Empty) returns (Empty) {
        option (google.api.http) = {
            post: "/rpc/auth/activate"
            body: "*"
        };
    }
    rpc UserInfo(Empty) returns (Empty) {
        option (google.api.http) = {
            get: "/rpc/auth/info"
        };
    }
    // =============================================== user management
    rpc QueryUsers(QueryUsersReq) returns (UsersResp) {
        option (google.api.http) = {
            get: "/rpc/users"
        };
    }
    rpc UpdateUser(UserEdit) returns (Empty) {
        option (google.api.http) = {
            post: "/rpc/users/{id}"
        };
    }
    // =============================================== dictItem
    rpc AdminInvokeUpdateDictItem(InvokeUpdateDictReq) returns (Empty) {
        option (google.api.http) = {
            post: "/rpc/dictionary"
            body: "*"
        };
    }
    rpc AdminInvokeDeleteDictItem(IdReq) returns (Empty) {
        option (google.api.http) = {
            delete: "/rpc/dictionary/{id}"
        };
    }
    // =============================================== dictTree
    rpc QueryDictTree(QueryDictTreeReq) returns (DictItemList) {
        option (google.api.http) = {
            get: "/rpc/dictionary"
        };
    }
    // =============================================== feedback
    rpc InvokeUpdateFeedback(FeedbackEdit) returns (Empty) {
        option (google.api.http) = {
            post: "/rpc/feedback"
            body: "*"
        };
    }
    rpc QueryFeedback(QueryFeedbackReq) returns (FeedbackList) {
        option (google.api.http) = {
            get: "/rpc/feedback"
        };
    }
    // =============================================== messages
    rpc InvokeNewMessage(MessageEdit) returns (Empty) {
        option (google.api.http) = {
            post: "/rpc/messages"
            body: "*"
        };
    }
    rpc QueryMessages(QueryMessagesReq) returns (MessageList) {
        option (google.api.http) = {
            get: "/rpc/messages"
        };
    }
    rpc QueryInbox(PaginationReq) returns (MessageList) {
        option (google.api.http) = {
            get: "/rpc/inbox"
        };
    }
    rpc DeleteInbox(StringReq) returns (Empty) {
        option (google.api.http) = {
            delete: "/rpc/inbox"
        };
    }
    rpc InvokeSetReadInbox(IdReq) returns (Empty) {
        option (google.api.http) = {
            get: "/rpc/inbox/{id}/read"
        };
    }
}
message QueryMessagesReq {
    Pagination pagination = 1;
}
message QueryFeedbackReq {
    EntityStatus status = 1;
    Pagination pagination = 10;
}
enum LoginType {
    LOGIN_TYPE_NULL = 0;
    LOGIN_TYPE_USERNAME_PASS = 1;
    LOGIN_TYPE_EMAIL_PASS = 2;
    LOGIN_TYPE_PHONE_PASS = 3;
    LOGIN_TYPE_ANY_PASS = 4;
    LOGIN_TYPE_PHONE_CODE = 5;
    LOGIN_TYPE_PHONE_LOGIN_OR_REG = 6;
}
enum ResetPasswordType {
    RESET_PASS_TYPE_NULL = 0;
    RESET_PASS_TYPE_PHONE_CODE = 1;
}
message LoginResp {
    User user = 1;
    repeated OrgWithAuthorities org_info = 2;
    string access_token = 3;
    string refresh_token = 4;
}
message RegisterReq {
    RegisterType type = 1;
    string    key = 2;
    string    secret = 3;
    string    code = 4;
    string    referral_code = 5;
}
message RefreshReq {
    string refresh_token = 1;
}
message RefreshResp {
    string access_token = 1;
    string refresh_token = 2;
}
message LoginReq {
    LoginType type = 1;
    string      key = 2;
    string    secret = 3;
    string    code = 4;
    int64    org_id = 5;
}
message ResetPasswordReq {
    ResetPasswordType type = 1;
    string key = 2;
    string secret = 3;
    string code = 4;
}

message QueryUsersReq {
    string phone = 1;
    string username = 2;
    string email = 3;
    EntityStatus status = 4;
    Pagination pagination = 10;
}

message QueryDictTreeReq {
    int64 pid = 1;
    repeated int64 ids = 2;
    EntityStatus status = 3;
    Pagination pagination = 10;
}

message InvokeUpdateDictReq {
    DictItemEdit item = 1;
}