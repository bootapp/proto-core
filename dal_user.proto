syntax = "proto3";
option java_package = "com.bootapp.core.grpc";
import "core_common.proto";
package core;

// add credential to prevent evil usage
service DalUserService {
    //--------------------------------------------------- user
    //--- Create a User
    rpc CreateUser(CreateUserReq) returns (UserWithOrgAuth);
    //--- Create users
    rpc CreateUsers(CreateUsersReq) returns (UsersResp);
    //--- Create users and automatically create new orgs
    rpc CreateUsersWithNewOrg(CreateUsersWithOrgReq) returns (UsersResp);
    //--- Update a User
    rpc UpdateUser(UpdateUserReq) returns (Empty);
    //--- Read a single user with auth
    rpc ReadUserAuth(ReadUserReq) returns (UserWithOrgAuth);
    //--- Read a user list
    rpc ReadUsers(ReadUsersReq) returns (UsersResp);
    //--- Read users with in operator
    rpc ReadUsersIn(ReadUsersInReq) returns (UsersResp);
    //-------- others
    rpc VerifyUniqueUser(User) returns (Empty);
    //--------------------------------------------------- org
    rpc UpdateOrgs(OrgsReq) returns (Empty);
    rpc ReadOrgs(ReadOrgsReq) returns (OrgsResp);
    //--------------------------------------------------- user-org
    rpc UpdateUserOrgs(CreateUserOrgsReq) returns (Empty);
    rpc ReadUserOrgs(AuthorizedReq) returns (UserOrgsResp);
    rpc DeleteUserOrgs(AuthorizedIdsReq) returns (Empty);
    rpc CreateOrgAndUserOrg(CreateOrgUserOrgReq) returns (Empty) {}
    // ========================================= dept
    rpc UpdateDepts(DeptsReq) returns (Empty);
    rpc ReadDepts(ReadDeptsReq) returns (DeptsResp);
    //--------------------------------------------------- relation
    rpc UpdateRelations(UpdateRelationsReq) returns (Empty);
    rpc ReadRelations(ReadRelationsReq) returns (RelationsResp);
    rpc DeleteRelations(AuthorizedIdsReq) returns (Empty);
    // ---- extra
    rpc ReadPartners(ReadPartnersReq) returns (PartnersResp);
    rpc ReadPartnersIn(ReadPartnersInReq) returns (PartnersResp);
    //--------------------------------------------------- message
    rpc ReadMessages(ReadMessagesReq) returns(MessageResp);
    rpc UpdateMessages(MessagesReq) returns (Empty);
    rpc DistributeMessages(Empty) returns (Empty);
    //----------- message receives
    rpc ReadInbox(ReadInboxReq) returns (MessageResp);
    rpc DeleteInbox(UpdateInboxReq) returns (Empty);
}
message CreateOrgUserOrgReq {
    int64 user_id = 1;
    int64 org_id = 2;
    int64 user_role_id = 3;
    OrganizationEdit org = 4;
}
message UserOrg {
    int64 id = 1;
    int64 user_id = 2;
    int64 org_id = 3;
    int64 user_role_id = 4;
    int64 create_at = 5;
    int64 update_at = 6;
}
message CreateUserOrgsReq {
    int64 user_id = 1;
    int64 org_id = 2;
    repeated UserOrg data = 3;
}

enum UpdateUserType {
    UPDATE_USER_TYPE_NULL = 0;
    UPDATE_USER_TYPE_ID = 1;
    UPDATE_USER_TYPE_USERNAME = 2;
    UPDATE_USER_TYPE_PHONE = 3;
    UPDATE_USER_TYPE_EMAIL = 4;
}
message UserOrgsResp {
    repeated UserOrg data = 1;
}
// =========================================== Dept
message DeptsReq {
    int64 org_id = 1;
    int64 user_id = 2;
    repeated DepartmentEdit data = 3;
}
message ReadDeptsReq {
    int64 org_id = 1;
    int64 user_id = 2;
    DepartmentEdit dept = 3;
    Pagination pagination = 4;
}
// =========================================== User
message CreateUserReq {
    int64 org_id = 1;
    int64 user_id = 2;
    User user = 3;
    int64 user_org_id = 4;
    int64 user_role_id = 5;
}
message CreateUsersReq {
    int64 org_id = 1;
    int64 user_id = 2;
    int64 role_id = 3;
    repeated User data = 4;
}
message UserWithOrgEdit {
    User user = 1;
    OrganizationEdit org = 2;
}
message CreateUsersWithOrgReq {
    int64 org_id = 1;
    int64 user_id = 2;
    int64 role_id = 3;
    repeated UserWithOrgEdit data = 4;
}
message ReadUserReq {
    int64 org_id = 1;
    int64 user_id = 2;
    User user = 3;
}
message UpdateUserReq {
    int64 org_id = 1;
    int64 user_id = 2;
    UpdateUserType type = 3;
    User user = 4;
}
message ReadUsersReq {
    int64 org_id = 1;
    int64 user_id = 2;
    User user = 3;
    Pagination pagination = 5;
}
message ReadUsersInReq {
    int64 org_id = 1;
    int64 user_id = 2;

    repeated int64 user_ids = 3;
    repeated string phones = 5;
    repeated string emails = 6;
    repeated string usernames = 7;
    repeated string names = 8;

    Pagination pagination = 9;
}
// =========================================== Org
message OrgsReq {
    int64 org_id = 1;
    int64 user_id = 2;
    repeated OrganizationEdit data = 3;
}
message ReadOrgsReq {
    int64 org_id = 1;
    int64 user_id = 2;
    OrganizationEdit org = 3;
    Pagination pagination = 4;
}
// =========================================== Relation
message UpdateRelationsReq {
    int64 org_id = 1;
    int64 user_id = 2;
    repeated Relation relation = 3;
}
message ReadRelationsReq {
    int64 org_id = 1;
    int64 user_id = 2;
    Relation relation = 3;
    Pagination pagination = 100;
}
message ReadPartnersReq {
    int64 org_id = 1;
    int64 user_id = 2;
    RelationType type = 3;
    string org_serial_number = 4;
    string org_name = 5;
    string contact_name = 6;
    string contact_phone = 7;
    string contact_email = 8;
    Pagination pagination = 100;
}
message ReadPartnersInReq {
    int64 org_id = 1;
    int64 user_id = 2;
    repeated int64 partner_ids = 3;
}
// =========================================== Message
message MessagesReq {
    int64 org_id = 1;
    int64 user_id = 2;
    repeated Message data = 3;
}
message ReadMessagesReq {
    int64 org_id = 1;
    int64 user_id = 2;
    Message message = 3;
    Pagination pagination = 4;
}

message UpdateInboxReq {
    int64 org_id = 1;
    int64 user_id = 2;
    repeated int64 ids = 3;
    EntityStatus status = 4;
}

message ReadInboxReq {
    int64 org_id = 1;
    int64 user_id = 2;
    EntityStatus status = 3;
    int64 update_at = 4;
}